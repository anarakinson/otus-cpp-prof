#include <model.h>
#include <gui.h>
#include <document_manager.h>
#include <image_manager.h>

#include <iostream>
#include <memory>
#include <string>

/*

В задании под "графическим примитивом" подразумевается абстрактный объект, 
который будет представлять собой элемент графического контента в вашем редакторе.

Создание внутри документа или как отдельный объект: 
Графический примитив должен создаваться как отдельный объект. 
Ваш "документ" в редакторе будет содержать коллекцию таких примитивов. 
Каждый примитив будет иметь свои свойства, например координаты, размер, цвет и т.д.

Взаимодействие с документом: 
Да, примитивы должны взаимодействовать с документом. 
Например, когда пользователь (эмуляция действий пользователя, мы же создаем просто каркас редактора) 
добавляет новый примитив, он добавляется в коллекцию примитивов документа. 
Когда примитив изменяется или удаляется, соответствующие изменения происходят в документе.

Так как вам необходимо создать только каркас, 
то вместо реального отображения графических примитивов вы будете просто выводить информацию в консоль. 
Например, при "создании" линии, вы можете выводить сообщение "Линия создана с координатами (x1, y1) - (x2, y2)".

Напомню, что 
MVC (Model-View-Controller) — это архитектурный паттерн проектирования, 
который разделяет приложение на три основные компоненты: 
Модель (Model), Представление (View) и Контроллер (Controller). 
Основная идея MVC заключается в том, что изменения в одной части приложения 
(например, наш пример, Модели) не должны напрямую влиять на другие части (Представление или Контроллер). 
Это обеспечивает гибкость и упрощает модификацию отдельных компонентов без необходимости переписывания всего кода.

*/

int main() {

    std::unique_ptr<Document> doc = DocumentManager::new_document();
    
    Line line{};

    std::cout << line.get_data() << std::endl;


}


